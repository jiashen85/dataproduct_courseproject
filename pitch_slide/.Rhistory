lm(I(child-mean(child)~I(parent-mean(parent))-1,data=galton))
lm(I(child-mean(child)~ I(parent-mean(parent))-1,data=galton))
lm(I(child-mean(child))~ I(parent-mean(parent))-1,data=galton)
load("C:/Users/tracy.shen/Google Drive/Data Tools learning/Getting and Cleaning Data/data/CourseProject/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/.RData")
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam)
dim(spam)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
smallSpam
spamLabel <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve,col=spamLabel)
install.packages("caret")
library(caret)
data(spam)
inTrain=createDataPartition(y=spam$type,p=0.75,list = FALSE)
dim(inTrain)
training=spam[inTrain,]
dim(training)
set.seed(32343)
modelFit=train(type~.,data=training,method="glm")
modelFit
warnings()
modelFit=train(type~.,data=training, method="glm")
modelFit$finalModel
set.seed(32343)
modelFit=train(type~.,data=training, method="glm")
modelFit$finalModel
predictions=predict(modelFit,newdata=testing)
testing=spam[-inTrain,]
predictions=predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
set.seed(32323)
folds=createFolds(y=spam$type,k=10,list=TRUE,returnTrain=FALSE)
sapply(folds,length)
folds[[1]][1:10]
folds=createResample(y=spam$type,times=10,list = TRUE)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
tme=1:1000
folds=createTimeSlices(y=tme,initialWindow = 20,horizon=10)
names(folds)
folds$train[[1]]
folds$test
folds$test[[1]]
folds$train[[2]]
fold$test[[2]]
folds$test[[2]]
set.seed(13343)
library(caret);library(kernlab);data(spam)
library(ggplot2)
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
data(spam)
inTrain=createDataPartition(y=spam$type,p=0.75,list=FALSE)
training=spam[inTrain,]
testing=spam[-inTrain,]
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
training$capAve[selectNA] <- NA
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
capAveTruth
training$capAve[selectNA] = NA
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
quantile(capAve - capAveTruth)
install.packages("RANN")
library(RANN)
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[,-58])$capAve
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
quantile((capAve - capAveTruth)[selectNA])
quantile((capAve - capAveTruth)[!selectNA])
library(ISLR);data(Wage)
inTrain=createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training=Wage[inTrain,]
testing=Wage[-inTrain,]
set.seed(1235)
inTrain=createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training=Wage[inTrain,]
testing=Wage[-inTrain,]
table(training$jobclass)
dummies=dummyVars(wage~jobclass,data=training)
ead(predict(dummies,newdata=training))
head(predict(dummies,newdata=training))
nsv=nearZeroVar(training,saveMetrics = TRUE)
nsv
bsBasis=bs(training$age,df=3)
library(splines)
bsBasis=bs(training$age,df=3)
bsBasis
lm1=lm(wage~bsBasis,data=training)
summary(lm1)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
predict(bsBasis,age=testing$age)
inTrain=createDataPartition(y=spam$type,p=0.75,list=FALSE)
training=spam[inTrain,]
testing=spam[-inTrain,]
M=abs(cor(training[,-58]))
class(M)
head(M)
diag(M)=0
which(M>0.8,arr.ind = T)
set.seed(1235)
inTrain=createDataPartition(y=spam$type,p=0.75,list=FALSE)
training=spam[inTrain,]
testing=spam[-inTrain,]
M=abs(cor(training[,-58]))
diag(M)=0
which(M>0.8,arr.ind = T)
name(spam)[c(34,32)]
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
X=0.71*training$num415+0.71*training$num857
Y=0.71*training$num415-0.71*training$num857
plot(X,Y)
smallSpam=spam[,c(34,32)]
prComp=prComp(smallSpam)
prComp=prcomp(smallSpam)
prComp
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor=((spam$type=="spam")*1+1)
prComp=prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
preProc=preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)#preProc function can take many methods but remember to specify for the method
spamPC=predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
trainPC=predict(preProc,log10(spam[,-58]+1))
modelFit=train(training$type~.,method="glm",data=trainPC)
preProc=preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
trainPC=predict(preProc,log10(spam[,-58]+1))
modelFit=train(training$type~.,method="glm",data=trainPC)
preProc=preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC=predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc=preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
trainPC=predict(preProc,log10(spam[,-58]+1))
modelFit=train(training$type ~ .,method="glm",data=trainPC)
preProc=preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC=predict(preProc,log10(training[,-58]+1))
modelFit=train(training$type ~ .,method="glm",data=trainPC)
testPC=predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit=train(training$type~.,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing))
data(faithful)
str(faithful)
plot(waiting,eruptions,data=faithful)
plot(faithful$waiting,faithful$eruptions)
inTrain=createDataPartition(y=failthful$waiting,p=0.5,list=FALSE)
trainFaith=faithful[inTrain,];testFaith=faithful[-inTrain,]
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
library(caret)
inTrain=createDataPartition(y=failthful$waiting,p=0.5,list=FALSE)
trainFaith=faithful[inTrain,];testFaith=faithful[-inTrain,]
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
data(faithful);set.seed(333)
inTrain=createDataPartition(y=failthful$waiting,p=0.5,list=FALSE)
trainFaith=faithful[inTrain,];testFaith=faithful[-inTrain,]
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
inTrain=createDataPartition(y=faithful$waiting,p=0.5,list=FALSE)
trainFaith=faithful[inTrain,];testFaith=faithful[-inTrain,]
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lm1=lm(eruptions~waiting,data=trainFaith)
summary(lm1)
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1]+coef[lm1][2]*80
coef(lm1)[1]+coef(lm1)[2]*80
newdata=data.frame(waiting=80)
newdata
predict(lm1,newdata)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)#fitted is contained under fucntion lm, means fitted mean values.
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)#fitted is contained under fucntion lm, means fitted mean values.
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)#fitted is contained under fucntion lm, means fitted mean values.
pred1=predict(lm1,newdata=testFaith,interval = "predication")
pred1=predict(lm1,newdata=testFaith,interval = "prediction")
pred1
ord=order(testFaith$waiting)
head(ord)
ord
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord],type="l",col=c(1,2,2),lty = c(1,1,1,),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord],type="l",,col=c(1,2,2),lty = c(1,1,1,),lwd=3)
matlines(testFaith$waiting[ord],pred1[ord],type="l",col=c(1,2,2),lty = c(1,1,1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord],type="l",col=c(1,2,2),lty = c(1,1,1),lwd=3)
pred1=predict(lm1,newdata=testFaith,interval = "prediction")
ord=order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord],type="l",col=c(1,2,2),lty = c(1,1,1),lwd=3)
par(mfrow=c(1,1))
pred1=predict(lm1,newdata=testFaith,interval = "prediction")
ord=order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord],type="l",col=c(1,2,2),lty = c(1,1,1),lwd=3)
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
pred1=predict(lm1,newdata=testFaith,interval = "prediction")
ord=order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",col=c(1,2,2),lty = c(1,1,1),lwd=3)
modFit=train(eruptions~waiting,data=trainFaith,method="lm")
summary(modFit$finalModel)
library(ISLR);data(Wage)
Wage=subset(Wage,select=-c(logwage))
summary(Wage)
inTrain=createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training=Wage[inTrain,];testing=Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
modFit=train(wage~age+jobclass+education,method="lm",data=training)
finMod=modFit$finalModel
print(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod$residuals,pch=19)
head(modFit)
head(pred)
pred=predict(modFit,testing)
head(pred)
qplot(wage,pred,colour=year,data=testing)
modFitAll=train(wage~.,data=training, method="lm")
pred=predict(modFitAll,testing)
qplot(wage,pred,data=testing)
testing=Wage[-inTrain,]
modFitAll=train(wage~.,data=training, method="lm")
pred=predict(modFitAll,testing)
modFitAll=train(wage~.,data=training, method="lm")
warnings()
training=Wage[inTrain,];testing=Wage[-inTrain,]
modFitAll=train(wage~.,data=training, method="lm")
pred=predict(modFitAll,testing)
qplot(wage,pred,data=testing)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
str(AlzheimerDisease)
data(concrete);str(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
head(inTrain)
hist(x=mixtures$Superplasticizer)
range(mixtures$suSuperplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
class(inTrain)
head(inTrain)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
head(inTrain)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training);dim(testing)
str(training)
ibrary(caret)
library(ISLR)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]#means resample once;class(inTrain)
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]#means resample once;class(inTrain)
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL=select(adData,start_with("IL"))
library(dplyr)
IL=select(adData,start_with("IL"))
IL=select(adData,starts_with("IL"))
library(kernlab);data(spam)
preProc=preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)#preProc function can take many methods but remember to specify for the method
spamPC=predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
typeColor=((spam$type=="spam")*1+1)
plot(spamPC[,1],spamPC[,2],col=typeColor)
prComp=prcomp(log10(spam[,-58]+1))
dim(prComp)
class(prComp)
preProc=preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)#preProc function can take many methods but remember to specify for the method
class(preProc)
head(preProc)
names(IL)
names(adData)
preProc=preProcess(IL,method="pca",pcaComp = 7)
pred=predict(preProc,IL)
str(pred)
str(preProc)
pred=predict(preProc,training)
warnings()
pred=predict(preProc,IL)
pred=predict(preProc,IL)
modelFit=train(training$diagnosis~.,method="glm",data=pred)
modelFit=train(training$diagnosis~IL[,1]+IL[,2]+IL[,3]+IL[,4]+IL[,4]+IL[,5]+IL[,6]+IL[,7],method="glm",data=pred)
names(adData)
IL=select(adData,c(58:69,diagnosis)
IL=select(adData,c(58:69,diagnosis))
IL=select(adData,starts_with("IL"),diagnosis)
head(IL)
preProc=preProcess(IL,method="pca",pcaComp = 7)
odelFit=train(IL$diagnosis~.,method="glm",data=IL)
modelFit=train(IL$diagnosis~.,method="glm",data=IL)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(IL[,-13],method="pca",pcaComp=7)
ILP <- predict(preProc,IL[,-13])
modelFit <- train(IL$diagnosis ~ .,method="glm",data=ILP)
summary(modelFit)
summary(modelFit$finalModel)
modelFit <- train(IL$diagnosis ~ .,method="lm",data=ILP)
summary(modelFit$finalModel)
lm1=lm(diagnosis~.,data=ILP)
modelFit=train(ILP$diagnosis~.,method="glm",data=ILP)
preProcess(IL,method = "pca",thresh = 0.8)
IL=select(adData,starts_with("IL"),diagnosis)
preProcess(IL[,-13],method = "pca",thresh = 0.8)
preProc <- preProcess(IL[,-13],method="pca",pcaComp=7)
trainPC <- predict(preProc,IL[,-13])
modelFit <- train(IL$diagnosis ~ .,method="glm",data=trainPC)
testPC=predict(preProc,testing[,-1])
testPC=predict(preProc,testing)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
IL=select(adData,starts_with("IL"),diagnosis)
training = IL[ inTrain,]
testing = IL[-inTrain,]
modelFit=train(training$diagnosis~.,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(training[,-13],method="pca",pcaComp=7)
trainPC <- predict(preProc,training[,-13])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC=predict(preProc,testing[,-13])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
dim(training);dim(testing)
head(training)
ILP=IL[,-13]
head(ILP)
training = IL[ inTrain,]
testing = IL[-inTrain,]
modelFit=train(training$diagnosis~.,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProcess(IL[,-13],method = "pca",thresh = 0.8)
modelFit=train(training$diagnosis~.,method="glm",preProcess="pca", data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(training[,-13],method="pca",pcaComp=8)
trainPC <- predict(preProc,training[,-13])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC=predict(preProc,testing[,-13])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training[,-13],method="pca",pcaComp=9)
trainPC <- predict(preProc,training[,-13])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC=predict(preProc,testing[,-13])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
IL=select(adData,starts_with("IL"),diagnosis)
training = IL[ inTrain,]
testing = IL[-inTrain,]
modelFit=train(training$diagnosis~.,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
IL=select(adData,starts_with("IL"),diagnosis)
training = IL[ inTrain,]
testing = IL[-inTrain,]
modelFit=train(training$diagnosis~.,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(training[,-13],method="pca",pcaComp=7)
trainPC <- predict(preProc,training[,-13])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC=predict(preProc,testing[,-13])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modelFit=train(training$diagnosis~.,method="glm",preProcess="pca", data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProcess(IL[,-13],method = "pca",thresh = 0.8)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
IL=select(adData,starts_with("IL"),diagnosis)
preProcess(IL[,-13],method = "pca",thresh = 0.8)
data(iris);library(caret);library(ggplot2)
names(iris)
table(iris$Species)
inTrain=createDataPartition(y=iris$Species,p=0.7,list = FALSE)
training=iris[inTrain,]
testing=iris[-inTrain,]
dim(training);dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit=train(Species~.,method="rpart",data = training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform = TRUE,main="Classification Tree")
text(modFit$finalModel,use.n = TRUE,all = TRUE,cex=0.8)
text(modFit$finalModel,use.n = TRUE,all = TRUE,cex=0.5)
plot(modFit$finalModel,uniform = TRUE,main="Classification Tree")
text(modFit$finalModel,use.n = TRUE,all = TRUE,cex=0.6)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata = testing)
head(training)
testing$Species
confusionMatrix(testing$Species,predict(modFit,newdata = testing))
library(ElemStatLearn);data(ozone,package="ElemStatLearn")
install.packages("ElemStatLearn")
library(ElemStatLearn);data(ozone,package="ElemStatLearn")
ozone=ozone[order(ozone$ozone),]
head(ozone)
dim(ozone)
head(data.frame(ozone=1:155))
dim(ozone)[1]
ll=matrix(NA,nrow=10,ncol=155)
head(ll)
head(ll)[,6]
ss=sample(1:dim(ozone)[1],replace = TRUE)
head(ss)
ozone0=ozone[ss,]
head(ozone0)
ozone0
ozone0=ozone0[order0$ozone),]
ozone0=ozone0[order0$ozone)
ozone0=ozone0[order0$ozone,]
ozone0=ozone0[order(ozone0$ozone),]
ozone0
loess(temperature~ozone,data=ozone0,span=0.2)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
ll=matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss=sample(1:dim(ozone)[1],replace = TRUE)#ss samples any number between 1 and 111(the total row number of the ozone data) with replacements.
ozone0=ozone[ss,];ozone0=ozone0[order(ozone0$ozone),]
loess0=loess(temperature~ozone,data=ozone0,span=0.2)#span controls the degree of smoothing
ll[i,]=predict(loess,newdata=data.frame(ozone=1:155))#data frame could be a list
}
ll=matrix(NA,nrow=10,ncol=155)#due to the for loop below, we have to create an empty matrix first
for(i in 1:10){
ss=sample(1:dim(ozone)[1],replace = TRUE)#ss samples any number between 1 and 111(the total row number of the ozone data) with replacements.
ozone0=ozone[ss,];ozone0=ozone0[order(ozone0$ozone),]
loess0=loess(temperature~ozone,data=ozone0,span=0.2)#span controls the degree of smoothing
ll[i,]=predict(loess0,newdata=data.frame(ozone=1:155))#data frame could be a list
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10) {lines(1:155,ll[i,],col="grey",lwd=2)}
ll[1,1:5]
ss=sample(1:dim(ozone)[1],replace = TRUE)#ss samples any number between 1 and 111(the total row number of the ozone data) with replacements.
ozone0=ozone[ss,];ozone0=ozone0[order(ozone0$ozone),]
loess0=loess(temperature~ozone,data=ozone0,span=0.2)
ll=predict(loess0,newdata=data.frame(ozone=1:155)
ll=predict(loess0,newdata=data.frame(ozone=1:155))
ll=matrix(NA,nrow=10,ncol=155)#due to the for loop below, we have to create an empty matrix first
for(i in 1:10){
ss=sample(1:dim(ozone)[1],replace = TRUE)#ss samples any number between 1 and 111(the total row number of the ozone data) with replacements.
ozone0=ozone[ss,];ozone0=ozone0[order(ozone0$ozone),]
loess0=loess(temperature~ozone,data=ozone0,span=0.2)#span controls the degree of smoothing
ll[i,]=predict(loess0,newdata=data.frame(ozone=1:155))#data frame could be a list
}
ll[1,]
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10) {lines(x=1:155,y=ll[i,],col="grey",lwd=2)}
lines(x=1:155,y=apply(ll,2,mean),col="red",lwd=2)
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("xtable")
mary(info)
summary(info)
update.packages("xtable")
library(shiny)
install.packages("xtable")
library(installr)
setInternet2(TRUE)
updateR()
setwd("C:/Users/tracy.shen/Google Drive/Data Tools learning/Data Product/courseproject")
library(rsconnect)
deployApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/tracy.shen/Google Drive/Data Tools learning/Data Product/courseproject/pitch_slide")
publish(user="jiashen85",repo="https://github.com/jiashen85/dataproduct_courseproject.git")
library(slidify)
publish(user="jiashen85",repo="https://github.com/jiashen85/dataproduct_courseproject.git")
publish(user="jiashen85",repo="https://jiashen85.github.io/")
publish_github(user="jiashen85",repo="https://github.com/jiashen85/dataproduct_courseproject.git")
slidify("index.Rmd")
publish_github(user="jiashen85",repo="https://github.com/jiashen85/dataproduct_courseproject.git")
